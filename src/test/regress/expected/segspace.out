--
-- Tests the spill files disk space accounting mechanism
--
-- create view to read the segspace value
DROP VIEW IF EXISTS segspace_view_gp_workfile_mgr_reset_segspace;
NOTICE:  view "segspace_view_gp_workfile_mgr_reset_segspace" does not exist, skipping
DROP FUNCTION IF EXISTS segspace_view_gp_workfile_mgr_reset_segspace_f();
NOTICE:  function segspace_view_gp_workfile_mgr_reset_segspace_f() does not exist, skipping
-- create helper UDF to reset the segpsace variable
CREATE FUNCTION segspace_view_gp_workfile_mgr_reset_segspace_f()
RETURNS SETOF bigint
AS '$libdir/gp_workfile_mgr', 'gp_workfile_mgr_reset_segspace'
LANGUAGE C IMMUTABLE;
CREATE VIEW segspace_view_gp_workfile_mgr_reset_segspace AS
SELECT * FROM gp_toolkit.__gp_localid, segspace_view_gp_workfile_mgr_reset_segspace_f()
UNION ALL
SELECT * FROM gp_toolkit.__gp_masterid, segspace_view_gp_workfile_mgr_reset_segspace_f();
--- create and populate the table
DROP TABLE IF EXISTS segspace_test_hj_skew;
NOTICE:  table "segspace_test_hj_skew" does not exist, skipping
CREATE TABLE segspace_test_hj_skew (i1 int, i2 int, i3 int, i4 int, i5 int, i6 int, i7 int, i8 int) DISTRIBUTED BY (i1);
set gp_autostats_mode = none;
-- many values with i1 = 1
INSERT INTO segspace_test_hj_skew SELECT 1,i,i,i,i,i,i,i FROM 
	(select generate_series(1, nsegments * 50000) as i from 
	(select count(*) as nsegments from gp_segment_configuration where role='p' and content >= 0) foo) bar;
-- some nicely distributed values
INSERT INTO segspace_test_hj_skew SELECT i,i,i,i,i,i,i,i FROM 
	(select generate_series(1, nsegments * 100000) as i from 
	(select count(*) as nsegments from gp_segment_configuration where role='p' and content >= 0) foo) bar;
ANALYZE segspace_test_hj_skew;
-- reset the segspace value
-- start_ignore
select count(*) > 0 from segspace_view_gp_workfile_mgr_reset_segspace;
 ?column? 
----------
 t
(1 row)

-- end_ignore
--
--  Testing that query cancelation during spilling updates the accounting
--
------------ Interrupting SELECT query that spills -------------------
-- enable the fault injector
--start_ignore
\! gpfaultinjector -f exec_hashjoin_new_batch -y reset --seg_dbid 2
\! gpfaultinjector -f exec_hashjoin_new_batch -y interrupt --seg_dbid 2
--end_ignore
set gp_workfile_type_hashjoin=buffile;
set statement_mem=2048;
set gp_autostats_mode = none;
set gp_hashjoin_metadata_memory_percent=0;
begin;
SELECT t1.* FROM segspace_test_hj_skew AS t1, segspace_test_hj_skew AS t2 WHERE t1.i1=t2.i2;
ERROR:  canceling MPP operation  (seg0 slice2 10.0.0.96:25432 pid=15432)
rollback;
-- check used segspace after test
reset statement_mem;
select max(bytes) from gp_toolkit.gp_workfile_mgr_used_diskspace;
 max 
-----
   0
(1 row)

------------ Interrupting INSERT INTO query that spills -------------------
-- enable the fault injector
--start_ignore
\! gpfaultinjector -f exec_hashjoin_new_batch -y reset --seg_dbid 2
\! gpfaultinjector -f exec_hashjoin_new_batch -y interrupt --seg_dbid 2
--end_ignore
drop table if exists segspace_t1_created;
NOTICE:  table "segspace_t1_created" does not exist, skipping
create table segspace_t1_created (i1 int, i2 int, i3 int, i4 int, i5 int, i6 int, i7 int, i8 int) DISTRIBUTED BY (i1);
set gp_workfile_type_hashjoin=buffile;
set statement_mem=2048;
set gp_autostats_mode = none;
set gp_hashjoin_metadata_memory_percent=0;
begin;
insert into segspace_t1_created
SELECT t1.* FROM segspace_test_hj_skew AS t1, segspace_test_hj_skew AS t2 WHERE t1.i1=t2.i2;
ERROR:  canceling MPP operation  (seg0 10.0.0.96:25432 pid=15432)
rollback;
-- check used segspace after test
reset statement_mem;
select max(bytes) from gp_toolkit.gp_workfile_mgr_used_diskspace;
 max 
-----
   0
(1 row)

--start_ignore
drop table if exists segspace_t1_created;
--end_ignore
------------ Interrupting CREATE TABLE AS query that spills -------------------
-- enable the fault injector
--start_ignore
\! gpfaultinjector -f exec_hashjoin_new_batch -y reset --seg_dbid 2
\! gpfaultinjector -f exec_hashjoin_new_batch -y interrupt --seg_dbid 2
--end_ignore
drop table if exists segspace_t1_created;
NOTICE:  table "segspace_t1_created" does not exist, skipping
set gp_workfile_type_hashjoin=buffile;
set statement_mem=2048;
set gp_autostats_mode = none;
set gp_hashjoin_metadata_memory_percent=0;
begin;
create table segspace_t1_created AS
SELECT t1.* FROM segspace_test_hj_skew AS t1, segspace_test_hj_skew AS t2 WHERE t1.i1=t2.i2;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'i1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  canceling MPP operation  (seg0 10.0.0.96:25432 pid=15432)
rollback;
-- check used segspace after test
reset statement_mem;
select max(bytes) from gp_toolkit.gp_workfile_mgr_used_diskspace;
 max 
-----
   0
(1 row)

-- Disable faultinjectors
--start_ignore
\! gpfaultinjector -f exec_hashjoin_new_batch -y reset --seg_dbid 2
--end_ignore
------------ workfile_limit_per_segment leak check during ERROR -------------------
drop table if exists testsisc;
NOTICE:  table "testsisc" does not exist, skipping
drop table if exists foo;
NOTICE:  table "foo" does not exist, skipping
create table testsisc (i1 int, i2 int, i3 int, i4 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into testsisc select i, i % 1000, i % 100000, i % 75 from generate_series(0,199999) i;
create table foo (i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
set statement_mem=1024; -- 1mb for 3 segment to get leak.
set gp_resqueue_print_operator_memory_limits=on;
set gp_enable_mk_sort=on;
set gp_cte_sharing=on;
-- enable the fault injector
--start_ignore
\! gpfaultinjector -f workfile_write_failure -y reset --seg_dbid 2
\! gpfaultinjector -f workfile_write_failure -y error --seg_dbid 2
--end_ignore
-- LEAK in UPDATE: update with sisc xslice sort
update foo set j=m.cc1 from (
  with ctesisc as
    (select * from testsisc order by i2)
  select t1.i1 as cc1, t1.i2 as cc2
  from ctesisc as t1, ctesisc as t2
  where t1.i1 = t2.i2 ) as m;
ERROR:  fault triggered, fault name:'workfile_write_failure' fault type:'error' (faultinjector.c:685)  (seg0 slice3 10.0.0.96:25432 pid=15464)
select max(bytes) from gp_toolkit.gp_workfile_mgr_used_diskspace;
 max 
-----
   0
(1 row)

-- reset the segspace value
-- start_ignore
select count(*) > 0 from segspace_view_gp_workfile_mgr_reset_segspace;
 ?column? 
----------
 t
(1 row)

-- end_ignore
drop table if exists testsisc;
drop table if exists foo; 
create table testsisc (i1 int, i2 int, i3 int, i4 int) WITH (appendonly=true, compresstype=zlib) ;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into testsisc select i, i % 1000, i % 100000, i % 75 from generate_series(0,199999) i;
create table foo (i int, j int) WITH (appendonly=true, compresstype=zlib);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into foo select i, i % 1000 from generate_series(0,199999) i;
-- LEAK in DELETE with APPEND ONLY tables
delete from testsisc using (
  select *
  from foo
) src  where testsisc.i1 = src.i;
select max(bytes) from gp_toolkit.gp_workfile_mgr_used_diskspace;
 max 
-----
   0
(1 row)

-- Disable faultinjectors
--start_ignore
\! gpfaultinjector -f workfile_write_failure -y reset --seg_dbid 2
--end_ignore
reset statement_mem;
reset gp_resqueue_print_operator_memory_limits;
reset gp_enable_mk_sort;
reset gp_cte_sharing;
DROP VIEW IF EXISTS segspace_view_gp_workfile_mgr_reset_segspace;
DROP FUNCTION IF EXISTS segspace_view_gp_workfile_mgr_reset_segspace_f();
